// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target x86_64-apple-tvos11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DatadogCore
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
@_exported import DatadogCore
import DatadogInternal
@_exported import DatadogInternal/*.DatadogCoreProtocol*/
@_exported import DatadogInternal/*.TrackingConsent*/
import Foundation
import Network
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol DataEncryption {
  func encrypt(data: Foundation.Data) throws -> Foundation.Data
  func decrypt(data: Foundation.Data) throws -> Foundation.Data
}
public let DatadogNTPServers: [Swift.String]
public protocol ServerDateProvider {
  func synchronize(update: @escaping (Foundation.TimeInterval) -> Swift.Void)
}
public enum Datadog {
  public struct Configuration {
    public enum BatchSize {
      case small
      case medium
      case large
      public static func == (a: DatadogCore.Datadog.Configuration.BatchSize, b: DatadogCore.Datadog.Configuration.BatchSize) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum UploadFrequency {
      case frequent
      case average
      case rare
      public static func == (a: DatadogCore.Datadog.Configuration.UploadFrequency, b: DatadogCore.Datadog.Configuration.UploadFrequency) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public enum BatchProcessingLevel {
      case low
      case medium
      case high
      public static func == (a: DatadogCore.Datadog.Configuration.BatchProcessingLevel, b: DatadogCore.Datadog.Configuration.BatchProcessingLevel) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var clientToken: Swift.String
    public var env: Swift.String
    public var site: DatadogInternal.DatadogSite
    public var service: Swift.String?
    public var batchSize: DatadogCore.Datadog.Configuration.BatchSize
    public var uploadFrequency: DatadogCore.Datadog.Configuration.UploadFrequency
    public var proxyConfiguration: [Swift.AnyHashable : Any]?
    public var encryption: (any DatadogCore.DataEncryption)?
    public var serverDateProvider: any DatadogCore.ServerDateProvider
    public var bundle: Foundation.Bundle
    public var batchProcessingLevel: DatadogCore.Datadog.Configuration.BatchProcessingLevel
    public var backgroundTasksEnabled: Swift.Bool
    public init(clientToken: Swift.String, env: Swift.String, site: DatadogInternal.DatadogSite = .us1, service: Swift.String? = nil, bundle: Foundation.Bundle = .main, batchSize: DatadogCore.Datadog.Configuration.BatchSize = .medium, uploadFrequency: DatadogCore.Datadog.Configuration.UploadFrequency = .average, proxyConfiguration: [Swift.AnyHashable : Any]? = nil, encryption: (any DatadogCore.DataEncryption)? = nil, serverDateProvider: (any DatadogCore.ServerDateProvider)? = nil, batchProcessingLevel: DatadogCore.Datadog.Configuration.BatchProcessingLevel = .medium, backgroundTasksEnabled: Swift.Bool = false)
  }
  public static var verbosityLevel: DatadogInternal.CoreLoggerLevel?
  public static func isInitialized(instanceName name: Swift.String = CoreRegistry.defaultInstanceName) -> Swift.Bool
  public static func sdkInstance(named name: Swift.String) -> any DatadogInternal.DatadogCoreProtocol
  public static func setUserInfo(id: Swift.String? = nil, name: Swift.String? = nil, email: Swift.String? = nil, extraInfo: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:], in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
  public static func addUserExtraInfo(_ extraInfo: [DatadogInternal.AttributeKey : (any Swift.Encodable)?], in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
  public static func set(trackingConsent: DatadogInternal.TrackingConsent, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
  public static func clearAllData(in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
  public static func stopInstance(named instanceName: Swift.String = CoreRegistry.defaultInstanceName)
  @discardableResult
  public static func initialize(with configuration: DatadogCore.Datadog.Configuration, trackingConsent: DatadogInternal.TrackingConsent, instanceName: Swift.String = CoreRegistry.defaultInstanceName) -> any DatadogInternal.DatadogCoreProtocol
}
extension DatadogCore.Datadog : DatadogInternal.InternalExtended {
  public typealias ExtendedType = DatadogCore.Datadog
}
extension DatadogInternal.InternalExtension where ExtendedType == DatadogCore.Datadog {
  public static var telemetry: DatadogCore._TelemetryProxy {
    get
  }
  public static func set(customVersion: Swift.String)
}
public struct _TelemetryProxy {
  public func debug(id: Swift.String, message: Swift.String)
  public func error(id: Swift.String, message: Swift.String, kind: Swift.String?, stack: Swift.String?)
}
extension DatadogCore.Datadog.Configuration : DatadogInternal.InternalExtended {
  public typealias ExtendedType = DatadogCore.Datadog.Configuration
}
extension DatadogInternal.InternalExtension where ExtendedType == DatadogCore.Datadog.Configuration {
  public var additionalConfiguration: [Swift.String : Any] {
    get
    set
  }
}
extension DatadogCore.Datadog.Configuration.BatchSize : Swift.Equatable {}
extension DatadogCore.Datadog.Configuration.BatchSize : Swift.Hashable {}
extension DatadogCore.Datadog.Configuration.UploadFrequency : Swift.Equatable {}
extension DatadogCore.Datadog.Configuration.UploadFrequency : Swift.Hashable {}
extension DatadogCore.Datadog.Configuration.BatchProcessingLevel : Swift.Equatable {}
extension DatadogCore.Datadog.Configuration.BatchProcessingLevel : Swift.Hashable {}
