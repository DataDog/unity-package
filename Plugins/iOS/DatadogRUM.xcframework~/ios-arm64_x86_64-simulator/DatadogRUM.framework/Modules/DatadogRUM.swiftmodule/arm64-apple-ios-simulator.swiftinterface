// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DatadogRUM
// swift-module-flags-ignorable: -enable-bare-slash-regex
import DatadogInternal
@_exported import DatadogInternal/*.DDURLSessionDelegate*/
@_exported import DatadogInternal/*.DatadogURLSessionDelegate*/
@_exported import DatadogInternal/*.URLSessionInstrumentation*/
@_exported import DatadogInternal/*.__URLSessionDelegateProviding*/
import Foundation
import Swift
import SwiftUI
import UIKit.UIApplication
import UIKit
import UIKit/*.UIScreen*/
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 13, tvOS 13, *)
extension SwiftUI.View {
  public func trackRUMView(name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:], in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) -> some SwiftUI.View
  
}
public enum PerformanceMetric {
  case flutterBuildTime
  case flutterRasterTime
  case jsFrameTimeSeconds
  public static func == (a: DatadogRUM.PerformanceMetric, b: DatadogRUM.PerformanceMetric) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DatadogRUM.RUM {
  public typealias ViewEventMapper = (DatadogRUM.RUMViewEvent) -> DatadogRUM.RUMViewEvent
  public typealias ResourceEventMapper = (DatadogRUM.RUMResourceEvent) -> DatadogRUM.RUMResourceEvent?
  public typealias ErrorEventMapper = (DatadogRUM.RUMErrorEvent) -> DatadogRUM.RUMErrorEvent?
  public typealias ActionEventMapper = (DatadogRUM.RUMActionEvent) -> DatadogRUM.RUMActionEvent?
  public typealias LongTaskEventMapper = (DatadogRUM.RUMLongTaskEvent) -> DatadogRUM.RUMLongTaskEvent?
  public typealias SessionListener = (Swift.String, Swift.Bool) -> Swift.Void
  public typealias ResourceAttributesProvider = (Foundation.URLRequest, Foundation.URLResponse?, Foundation.Data?, (any Swift.Error)?) -> [DatadogInternal.AttributeKey : any Swift.Encodable]?
  public struct Configuration {
    public let applicationID: Swift.String
    public var sessionSampleRate: Swift.Float
    public var uiKitViewsPredicate: (any DatadogRUM.UIKitRUMViewsPredicate)?
    public var uiKitActionsPredicate: (any DatadogRUM.UITouchRUMActionsPredicate)?
    public var urlSessionTracking: DatadogRUM.RUM.Configuration.URLSessionTracking?
    public var trackFrustrations: Swift.Bool
    public var trackBackgroundEvents: Swift.Bool
    public var longTaskThreshold: Foundation.TimeInterval?
    public var vitalsUpdateFrequency: DatadogRUM.RUM.Configuration.VitalsFrequency?
    public var viewEventMapper: DatadogRUM.RUM.ViewEventMapper?
    public var resourceEventMapper: DatadogRUM.RUM.ResourceEventMapper?
    public var actionEventMapper: DatadogRUM.RUM.ActionEventMapper?
    public var errorEventMapper: DatadogRUM.RUM.ErrorEventMapper?
    public var longTaskEventMapper: DatadogRUM.RUM.LongTaskEventMapper?
    public var onSessionStart: DatadogRUM.RUM.SessionListener?
    public var customEndpoint: Foundation.URL?
    public var telemetrySampleRate: Swift.Float
    public struct URLSessionTracking {
      public var firstPartyHostsTracing: DatadogRUM.RUM.Configuration.URLSessionTracking.FirstPartyHostsTracing?
      public var resourceAttributesProvider: DatadogRUM.RUM.ResourceAttributesProvider?
    }
    public enum VitalsFrequency : Swift.String {
      case frequent
      case average
      case rare
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
  }
}
extension DatadogRUM.RUM.Configuration.URLSessionTracking {
  public enum FirstPartyHostsTracing {
    case trace(hosts: Swift.Set<Swift.String>, sampleRate: Swift.Float = 20)
    case traceWithHeaders(hostsWithHeaders: [Swift.String : Swift.Set<DatadogInternal.TracingHeaderType>], sampleRate: Swift.Float = 20)
  }
  public init(firstPartyHostsTracing: DatadogRUM.RUM.Configuration.URLSessionTracking.FirstPartyHostsTracing? = nil, resourceAttributesProvider: DatadogRUM.RUM.ResourceAttributesProvider? = nil)
}
extension DatadogRUM.RUM.Configuration {
  public init(applicationID: Swift.String, sessionSampleRate: Swift.Float = 100, uiKitViewsPredicate: (any DatadogRUM.UIKitRUMViewsPredicate)? = nil, uiKitActionsPredicate: (any DatadogRUM.UITouchRUMActionsPredicate)? = nil, urlSessionTracking: DatadogRUM.RUM.Configuration.URLSessionTracking? = nil, trackFrustrations: Swift.Bool = true, trackBackgroundEvents: Swift.Bool = false, longTaskThreshold: Foundation.TimeInterval? = 0.1, vitalsUpdateFrequency: DatadogRUM.RUM.Configuration.VitalsFrequency? = .average, viewEventMapper: DatadogRUM.RUM.ViewEventMapper? = nil, resourceEventMapper: DatadogRUM.RUM.ResourceEventMapper? = nil, actionEventMapper: DatadogRUM.RUM.ActionEventMapper? = nil, errorEventMapper: DatadogRUM.RUM.ErrorEventMapper? = nil, longTaskEventMapper: DatadogRUM.RUM.LongTaskEventMapper? = nil, onSessionStart: DatadogRUM.RUM.SessionListener? = nil, customEndpoint: Foundation.URL? = nil, telemetrySampleRate: Swift.Float = 20)
}
extension DatadogRUM.RUM.Configuration : DatadogInternal.InternalExtended {
  public typealias ExtendedType = DatadogRUM.RUM.Configuration
}
extension DatadogInternal.InternalExtension where ExtendedType == DatadogRUM.RUM.Configuration {
  public var configurationTelemetrySampleRate: Swift.Float {
    get
    set
  }
}
public struct RUMActionEvent {
  public let dd: DatadogRUM.RUMActionEvent.DD
  public var action: DatadogRUM.RUMActionEvent.Action
  public let application: DatadogRUM.RUMActionEvent.Application
  public let buildId: Swift.String?
  public let buildVersion: Swift.String?
  public let ciTest: DatadogRUM.RUMCITest?
  public let connectivity: DatadogRUM.RUMConnectivity?
  public let container: DatadogRUM.RUMActionEvent.Container?
  public var context: DatadogRUM.RUMEventAttributes? {
    get
  }
  public let date: Swift.Int64
  public let device: DatadogRUM.RUMDevice?
  public let display: DatadogRUM.RUMActionEvent.Display?
  public let os: DatadogRUM.RUMOperatingSystem?
  public let service: Swift.String?
  public let session: DatadogRUM.RUMActionEvent.Session
  public let source: DatadogRUM.RUMActionEvent.Source?
  public let synthetics: DatadogRUM.RUMSyntheticsTest?
  public let type: Swift.String
  public var usr: DatadogRUM.RUMUser? {
    get
  }
  public let version: Swift.String?
  public var view: DatadogRUM.RUMActionEvent.View
  public struct DD : Swift.Codable {
    public let action: DatadogRUM.RUMActionEvent.DD.Action?
    public let browserSdkVersion: Swift.String?
    public let configuration: DatadogRUM.RUMActionEvent.DD.Configuration?
    public let formatVersion: Swift.Int64
    public let session: DatadogRUM.RUMActionEvent.DD.Session?
    public struct Action : Swift.Codable {
      public let position: DatadogRUM.RUMActionEvent.DD.Action.Position?
      public let target: DatadogRUM.RUMActionEvent.DD.Action.Target?
      public struct Position : Swift.Codable {
        public let x: Swift.Int64
        public let y: Swift.Int64
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public struct Target : Swift.Codable {
        public let height: Swift.Int64?
        public let selector: Swift.String?
        public let width: Swift.Int64?
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Configuration : Swift.Codable {
      public let sessionReplaySampleRate: Swift.Double?
      public let sessionSampleRate: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Session : Swift.Codable {
      public let plan: DatadogRUM.RUMActionEvent.DD.Session.Plan?
      public let sessionPrecondition: DatadogRUM.RUMSessionPrecondition?
      public enum Plan : Swift.Int, Swift.Codable {
        case plan1
        case plan2
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let crash: DatadogRUM.RUMActionEvent.Action.Crash?
    public let error: DatadogRUM.RUMActionEvent.Action.Error?
    public let frustration: DatadogRUM.RUMActionEvent.Action.Frustration?
    public let id: Swift.String?
    public let loadingTime: Swift.Int64?
    public let longTask: DatadogRUM.RUMActionEvent.Action.LongTask?
    public let resource: DatadogRUM.RUMActionEvent.Action.Resource?
    public var target: DatadogRUM.RUMActionEvent.Action.Target?
    public let type: DatadogRUM.RUMActionEvent.Action.ActionType
    public struct Crash : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Error : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Frustration : Swift.Codable {
      public let type: [DatadogRUM.RUMActionEvent.Action.Frustration.FrustrationType]
      public enum FrustrationType : Swift.String, Swift.Codable {
        case rageClick
        case deadClick
        case errorClick
        case rageTap
        case errorTap
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct LongTask : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Resource : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Target : Swift.Codable {
      public var name: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum ActionType : Swift.String, Swift.Codable {
      case custom
      case click
      case tap
      case scroll
      case swipe
      case applicationStart
      case back
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable {
    public let source: DatadogRUM.RUMActionEvent.Container.Source
    public let view: DatadogRUM.RUMActionEvent.Container.View
    public enum Source : Swift.String, Swift.Codable {
      case android
      case ios
      case browser
      case flutter
      case reactNative
      case roku
      case unity
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct View : Swift.Codable {
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Display : Swift.Codable {
    public let viewport: DatadogRUM.RUMActionEvent.Display.Viewport?
    public struct Viewport : Swift.Codable {
      public let height: Swift.Double
      public let width: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let hasReplay: Swift.Bool?
    public let id: Swift.String
    public let type: DatadogRUM.RUMSessionType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public let inForeground: Swift.Bool?
    public var name: Swift.String?
    public var referrer: Swift.String?
    public var url: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMErrorEvent {
  public let dd: DatadogRUM.RUMErrorEvent.DD
  public let action: DatadogRUM.RUMErrorEvent.Action?
  public let application: DatadogRUM.RUMErrorEvent.Application
  public let buildId: Swift.String?
  public let buildVersion: Swift.String?
  public let ciTest: DatadogRUM.RUMCITest?
  public let connectivity: DatadogRUM.RUMConnectivity?
  public let container: DatadogRUM.RUMErrorEvent.Container?
  public var context: DatadogRUM.RUMEventAttributes? {
    get
  }
  public let date: Swift.Int64
  public let device: DatadogRUM.RUMDevice?
  public let display: DatadogRUM.RUMErrorEvent.Display?
  public var error: DatadogRUM.RUMErrorEvent.Error
  public var featureFlags: DatadogRUM.RUMErrorEvent.FeatureFlags? {
    get
  }
  public let os: DatadogRUM.RUMOperatingSystem?
  public let service: Swift.String?
  public let session: DatadogRUM.RUMErrorEvent.Session
  public let source: DatadogRUM.RUMErrorEvent.Source?
  public let synthetics: DatadogRUM.RUMSyntheticsTest?
  public let type: Swift.String
  public var usr: DatadogRUM.RUMUser? {
    get
  }
  public let version: Swift.String?
  public var view: DatadogRUM.RUMErrorEvent.View
  public struct DD : Swift.Codable {
    public let browserSdkVersion: Swift.String?
    public let configuration: DatadogRUM.RUMErrorEvent.DD.Configuration?
    public let formatVersion: Swift.Int64
    public let session: DatadogRUM.RUMErrorEvent.DD.Session?
    public struct Configuration : Swift.Codable {
      public let sessionReplaySampleRate: Swift.Double?
      public let sessionSampleRate: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Session : Swift.Codable {
      public let plan: DatadogRUM.RUMErrorEvent.DD.Session.Plan?
      public let sessionPrecondition: DatadogRUM.RUMSessionPrecondition?
      public enum Plan : Swift.Int, Swift.Codable {
        case plan1
        case plan2
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: DatadogRUM.RUMActionID
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable {
    public let source: DatadogRUM.RUMErrorEvent.Container.Source
    public let view: DatadogRUM.RUMErrorEvent.Container.View
    public enum Source : Swift.String, Swift.Codable {
      case android
      case ios
      case browser
      case flutter
      case reactNative
      case roku
      case unity
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct View : Swift.Codable {
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Display : Swift.Codable {
    public let viewport: DatadogRUM.RUMErrorEvent.Display.Viewport?
    public struct Viewport : Swift.Codable {
      public let height: Swift.Double
      public let width: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Error : Swift.Codable {
    public var causes: [DatadogRUM.RUMErrorEvent.Error.Causes]?
    public var fingerprint: Swift.String?
    public let handling: DatadogRUM.RUMErrorEvent.Error.Handling?
    public let handlingStack: Swift.String?
    public let id: Swift.String?
    public let isCrash: Swift.Bool?
    public var message: Swift.String
    public var resource: DatadogRUM.RUMErrorEvent.Error.Resource?
    public let source: DatadogRUM.RUMErrorEvent.Error.Source
    public let sourceType: DatadogRUM.RUMErrorEvent.Error.SourceType?
    public var stack: Swift.String?
    public let type: Swift.String?
    public struct Causes : Swift.Codable {
      public var message: Swift.String
      public let source: DatadogRUM.RUMErrorEvent.Error.Causes.Source
      public var stack: Swift.String?
      public let type: Swift.String?
      public enum Source : Swift.String, Swift.Codable {
        case network
        case source
        case console
        case logger
        case agent
        case webview
        case custom
        case report
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Handling : Swift.String, Swift.Codable {
      case handled
      case unhandled
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct Resource : Swift.Codable {
      public let method: DatadogRUM.RUMMethod
      public let provider: DatadogRUM.RUMErrorEvent.Error.Resource.Provider?
      public let statusCode: Swift.Int64
      public var url: Swift.String
      public struct Provider : Swift.Codable {
        public let domain: Swift.String?
        public let name: Swift.String?
        public let type: DatadogRUM.RUMErrorEvent.Error.Resource.Provider.ProviderType?
        public enum ProviderType : Swift.String, Swift.Codable {
          case ad
          case advertising
          case analytics
          case cdn
          case content
          case customerSuccess
          case firstParty
          case hosting
          case marketing
          case other
          case social
          case tagManager
          case utility
          case video
          public init?(rawValue: Swift.String)
          public typealias RawValue = Swift.String
          public var rawValue: Swift.String {
            get
          }
        }
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Source : Swift.String, Swift.Codable {
      case network
      case source
      case console
      case logger
      case agent
      case webview
      case custom
      case report
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public enum SourceType : Swift.String, Swift.Codable {
      case android
      case browser
      case ios
      case reactNative
      case flutter
      case roku
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FeatureFlags : Swift.Codable {
    public var featureFlagsInfo: [Swift.String : any Swift.Encodable] {
      get
    }
  }
  public struct Session : Swift.Codable {
    public let hasReplay: Swift.Bool?
    public let id: Swift.String
    public let type: DatadogRUM.RUMSessionType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public let inForeground: Swift.Bool?
    public var name: Swift.String?
    public var referrer: Swift.String?
    public var url: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogRUM.RUMErrorEvent.FeatureFlags {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMLongTaskEvent {
  public let dd: DatadogRUM.RUMLongTaskEvent.DD
  public let action: DatadogRUM.RUMLongTaskEvent.Action?
  public let application: DatadogRUM.RUMLongTaskEvent.Application
  public let buildId: Swift.String?
  public let buildVersion: Swift.String?
  public let ciTest: DatadogRUM.RUMCITest?
  public let connectivity: DatadogRUM.RUMConnectivity?
  public let container: DatadogRUM.RUMLongTaskEvent.Container?
  public var context: DatadogRUM.RUMEventAttributes? {
    get
  }
  public let date: Swift.Int64
  public let device: DatadogRUM.RUMDevice?
  public let display: DatadogRUM.RUMLongTaskEvent.Display?
  public let longTask: DatadogRUM.RUMLongTaskEvent.LongTask
  public let os: DatadogRUM.RUMOperatingSystem?
  public let service: Swift.String?
  public let session: DatadogRUM.RUMLongTaskEvent.Session
  public let source: DatadogRUM.RUMLongTaskEvent.Source?
  public let synthetics: DatadogRUM.RUMSyntheticsTest?
  public let type: Swift.String
  public var usr: DatadogRUM.RUMUser? {
    get
  }
  public let version: Swift.String?
  public var view: DatadogRUM.RUMLongTaskEvent.View
  public struct DD : Swift.Codable {
    public let browserSdkVersion: Swift.String?
    public let configuration: DatadogRUM.RUMLongTaskEvent.DD.Configuration?
    public let discarded: Swift.Bool?
    public let formatVersion: Swift.Int64
    public let session: DatadogRUM.RUMLongTaskEvent.DD.Session?
    public struct Configuration : Swift.Codable {
      public let sessionReplaySampleRate: Swift.Double?
      public let sessionSampleRate: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Session : Swift.Codable {
      public let plan: DatadogRUM.RUMLongTaskEvent.DD.Session.Plan?
      public let sessionPrecondition: DatadogRUM.RUMSessionPrecondition?
      public enum Plan : Swift.Int, Swift.Codable {
        case plan1
        case plan2
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: DatadogRUM.RUMActionID
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable {
    public let source: DatadogRUM.RUMLongTaskEvent.Container.Source
    public let view: DatadogRUM.RUMLongTaskEvent.Container.View
    public enum Source : Swift.String, Swift.Codable {
      case android
      case ios
      case browser
      case flutter
      case reactNative
      case roku
      case unity
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct View : Swift.Codable {
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Display : Swift.Codable {
    public let viewport: DatadogRUM.RUMLongTaskEvent.Display.Viewport?
    public struct Viewport : Swift.Codable {
      public let height: Swift.Double
      public let width: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct LongTask : Swift.Codable {
    public let duration: Swift.Int64
    public let id: Swift.String?
    public let isFrozenFrame: Swift.Bool?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let hasReplay: Swift.Bool?
    public let id: Swift.String
    public let type: DatadogRUM.RUMSessionType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public var name: Swift.String?
    public var referrer: Swift.String?
    public var url: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMResourceEvent {
  public let dd: DatadogRUM.RUMResourceEvent.DD
  public let action: DatadogRUM.RUMResourceEvent.Action?
  public let application: DatadogRUM.RUMResourceEvent.Application
  public let buildId: Swift.String?
  public let buildVersion: Swift.String?
  public let ciTest: DatadogRUM.RUMCITest?
  public let connectivity: DatadogRUM.RUMConnectivity?
  public let container: DatadogRUM.RUMResourceEvent.Container?
  public var context: DatadogRUM.RUMEventAttributes? {
    get
  }
  public let date: Swift.Int64
  public let device: DatadogRUM.RUMDevice?
  public let display: DatadogRUM.RUMResourceEvent.Display?
  public let os: DatadogRUM.RUMOperatingSystem?
  public var resource: DatadogRUM.RUMResourceEvent.Resource
  public let service: Swift.String?
  public let session: DatadogRUM.RUMResourceEvent.Session
  public let source: DatadogRUM.RUMResourceEvent.Source?
  public let synthetics: DatadogRUM.RUMSyntheticsTest?
  public let type: Swift.String
  public var usr: DatadogRUM.RUMUser? {
    get
  }
  public let version: Swift.String?
  public var view: DatadogRUM.RUMResourceEvent.View
  public struct DD : Swift.Codable {
    public let browserSdkVersion: Swift.String?
    public let configuration: DatadogRUM.RUMResourceEvent.DD.Configuration?
    public let discarded: Swift.Bool?
    public let formatVersion: Swift.Int64
    public let rulePsr: Swift.Double?
    public let session: DatadogRUM.RUMResourceEvent.DD.Session?
    public let spanId: Swift.String?
    public let traceId: Swift.String?
    public struct Configuration : Swift.Codable {
      public let sessionReplaySampleRate: Swift.Double?
      public let sessionSampleRate: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Session : Swift.Codable {
      public let plan: DatadogRUM.RUMResourceEvent.DD.Session.Plan?
      public let sessionPrecondition: DatadogRUM.RUMSessionPrecondition?
      public enum Plan : Swift.Int, Swift.Codable {
        case plan1
        case plan2
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: DatadogRUM.RUMActionID
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable {
    public let source: DatadogRUM.RUMResourceEvent.Container.Source
    public let view: DatadogRUM.RUMResourceEvent.Container.View
    public enum Source : Swift.String, Swift.Codable {
      case android
      case ios
      case browser
      case flutter
      case reactNative
      case roku
      case unity
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct View : Swift.Codable {
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Display : Swift.Codable {
    public let viewport: DatadogRUM.RUMResourceEvent.Display.Viewport?
    public struct Viewport : Swift.Codable {
      public let height: Swift.Double
      public let width: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Resource : Swift.Codable {
    public let connect: DatadogRUM.RUMResourceEvent.Resource.Connect?
    public let dns: DatadogRUM.RUMResourceEvent.Resource.DNS?
    public let download: DatadogRUM.RUMResourceEvent.Resource.Download?
    public let duration: Swift.Int64?
    public let firstByte: DatadogRUM.RUMResourceEvent.Resource.FirstByte?
    public var graphql: DatadogRUM.RUMResourceEvent.Resource.Graphql?
    public let id: Swift.String?
    public let method: DatadogRUM.RUMMethod?
    public let provider: DatadogRUM.RUMResourceEvent.Resource.Provider?
    public let redirect: DatadogRUM.RUMResourceEvent.Resource.Redirect?
    public let size: Swift.Int64?
    public let ssl: DatadogRUM.RUMResourceEvent.Resource.SSL?
    public let statusCode: Swift.Int64?
    public let type: DatadogRUM.RUMResourceEvent.Resource.ResourceType
    public var url: Swift.String
    public struct Connect : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct DNS : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Download : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct FirstByte : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Graphql : Swift.Codable {
      public let operationName: Swift.String?
      public let operationType: DatadogRUM.RUMResourceEvent.Resource.Graphql.OperationType
      public var payload: Swift.String?
      public var variables: Swift.String?
      public enum OperationType : Swift.String, Swift.Codable {
        case query
        case mutation
        case subscription
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Provider : Swift.Codable {
      public let domain: Swift.String?
      public let name: Swift.String?
      public let type: DatadogRUM.RUMResourceEvent.Resource.Provider.ProviderType?
      public enum ProviderType : Swift.String, Swift.Codable {
        case ad
        case advertising
        case analytics
        case cdn
        case content
        case customerSuccess
        case firstParty
        case hosting
        case marketing
        case other
        case social
        case tagManager
        case utility
        case video
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Redirect : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct SSL : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum ResourceType : Swift.String, Swift.Codable {
      case document
      case xhr
      case beacon
      case fetch
      case css
      case js
      case image
      case font
      case media
      case other
      case native
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let hasReplay: Swift.Bool?
    public let id: Swift.String
    public let type: DatadogRUM.RUMSessionType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public var name: Swift.String?
    public var referrer: Swift.String?
    public var url: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMViewEvent {
  public let dd: DatadogRUM.RUMViewEvent.DD
  public let application: DatadogRUM.RUMViewEvent.Application
  public let buildId: Swift.String?
  public let buildVersion: Swift.String?
  public let ciTest: DatadogRUM.RUMCITest?
  public let connectivity: DatadogRUM.RUMConnectivity?
  public let container: DatadogRUM.RUMViewEvent.Container?
  public var context: DatadogRUM.RUMEventAttributes? {
    get
  }
  public let date: Swift.Int64
  public let device: DatadogRUM.RUMDevice?
  public let display: DatadogRUM.RUMViewEvent.Display?
  public var featureFlags: DatadogRUM.RUMViewEvent.FeatureFlags? {
    get
  }
  public let os: DatadogRUM.RUMOperatingSystem?
  public let privacy: DatadogRUM.RUMViewEvent.Privacy?
  public let service: Swift.String?
  public let session: DatadogRUM.RUMViewEvent.Session
  public let source: DatadogRUM.RUMViewEvent.Source?
  public let synthetics: DatadogRUM.RUMSyntheticsTest?
  public let type: Swift.String
  public var usr: DatadogRUM.RUMUser? {
    get
  }
  public let version: Swift.String?
  public var view: DatadogRUM.RUMViewEvent.View
  public struct DD : Swift.Codable {
    public let browserSdkVersion: Swift.String?
    public let configuration: DatadogRUM.RUMViewEvent.DD.Configuration?
    public let documentVersion: Swift.Int64
    public let formatVersion: Swift.Int64
    public let pageStates: [DatadogRUM.RUMViewEvent.DD.PageStates]?
    public let replayStats: DatadogRUM.RUMViewEvent.DD.ReplayStats?
    public let session: DatadogRUM.RUMViewEvent.DD.Session?
    public struct Configuration : Swift.Codable {
      public let sessionReplaySampleRate: Swift.Double?
      public let sessionSampleRate: Swift.Double
      public let startSessionReplayRecordingManually: Swift.Bool?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct PageStates : Swift.Codable {
      public let start: Swift.Int64
      public let state: DatadogRUM.RUMViewEvent.DD.PageStates.State
      public enum State : Swift.String, Swift.Codable {
        case active
        case passive
        case hidden
        case frozen
        case terminated
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct ReplayStats : Swift.Codable {
      public let recordsCount: Swift.Int64?
      public let segmentsCount: Swift.Int64?
      public let segmentsTotalRawSize: Swift.Int64?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Session : Swift.Codable {
      public let plan: DatadogRUM.RUMViewEvent.DD.Session.Plan?
      public let sessionPrecondition: DatadogRUM.RUMSessionPrecondition?
      public enum Plan : Swift.Int, Swift.Codable {
        case plan1
        case plan2
        public init?(rawValue: Swift.Int)
        public typealias RawValue = Swift.Int
        public var rawValue: Swift.Int {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Container : Swift.Codable {
    public let source: DatadogRUM.RUMViewEvent.Container.Source
    public let view: DatadogRUM.RUMViewEvent.Container.View
    public enum Source : Swift.String, Swift.Codable {
      case android
      case ios
      case browser
      case flutter
      case reactNative
      case roku
      case unity
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct View : Swift.Codable {
      public let id: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Display : Swift.Codable {
    public let scroll: DatadogRUM.RUMViewEvent.Display.Scroll?
    public let viewport: DatadogRUM.RUMViewEvent.Display.Viewport?
    public struct Scroll : Swift.Codable {
      public let maxDepth: Swift.Double
      public let maxDepthScrollTop: Swift.Double
      public let maxScrollHeight: Swift.Double
      public let maxScrollHeightTime: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Viewport : Swift.Codable {
      public let height: Swift.Double
      public let width: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct FeatureFlags : Swift.Codable {
    public var featureFlagsInfo: [Swift.String : any Swift.Encodable] {
      get
    }
  }
  public struct Privacy : Swift.Codable {
    public let replayLevel: DatadogRUM.RUMViewEvent.Privacy.ReplayLevel
    public enum ReplayLevel : Swift.String, Swift.Codable {
      case allow
      case mask
      case maskUserInput
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let hasReplay: Swift.Bool?
    public let id: Swift.String
    public let isActive: Swift.Bool?
    public let sampledForReplay: Swift.Bool?
    public let type: DatadogRUM.RUMSessionType
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case roku
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct View : Swift.Codable {
    public let action: DatadogRUM.RUMViewEvent.View.Action
    public let cpuTicksCount: Swift.Double?
    public let cpuTicksPerSecond: Swift.Double?
    public let crash: DatadogRUM.RUMViewEvent.View.Crash?
    public let cumulativeLayoutShift: Swift.Double?
    public let cumulativeLayoutShiftTargetSelector: Swift.String?
    public let customTimings: [Swift.String : Swift.Int64]?
    public let domComplete: Swift.Int64?
    public let domContentLoaded: Swift.Int64?
    public let domInteractive: Swift.Int64?
    public let error: DatadogRUM.RUMViewEvent.View.Error
    public let firstByte: Swift.Int64?
    public let firstContentfulPaint: Swift.Int64?
    public let firstInputDelay: Swift.Int64?
    public let firstInputTargetSelector: Swift.String?
    public let firstInputTime: Swift.Int64?
    public let flutterBuildTime: DatadogRUM.RUMViewEvent.View.FlutterBuildTime?
    public let flutterRasterTime: DatadogRUM.RUMViewEvent.View.FlutterRasterTime?
    public let frozenFrame: DatadogRUM.RUMViewEvent.View.FrozenFrame?
    public let frustration: DatadogRUM.RUMViewEvent.View.Frustration?
    public let id: Swift.String
    public let inForegroundPeriods: [DatadogRUM.RUMViewEvent.View.InForegroundPeriods]?
    public let interactionToNextPaint: Swift.Int64?
    public let interactionToNextPaintTargetSelector: Swift.String?
    public let isActive: Swift.Bool?
    public let isSlowRendered: Swift.Bool?
    public let jsRefreshRate: DatadogRUM.RUMViewEvent.View.JsRefreshRate?
    public let largestContentfulPaint: Swift.Int64?
    public let largestContentfulPaintTargetSelector: Swift.String?
    public let loadEvent: Swift.Int64?
    public let loadingTime: Swift.Int64?
    public let loadingType: DatadogRUM.RUMViewEvent.View.LoadingType?
    public let longTask: DatadogRUM.RUMViewEvent.View.LongTask?
    public let memoryAverage: Swift.Double?
    public let memoryMax: Swift.Double?
    public var name: Swift.String?
    public var referrer: Swift.String?
    public let refreshRateAverage: Swift.Double?
    public let refreshRateMin: Swift.Double?
    public let resource: DatadogRUM.RUMViewEvent.View.Resource
    public let timeSpent: Swift.Int64
    public var url: Swift.String
    public struct Action : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Crash : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Error : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct FlutterBuildTime : Swift.Codable {
      public let average: Swift.Double
      public let max: Swift.Double
      public let metricMax: Swift.Double?
      public let min: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct FlutterRasterTime : Swift.Codable {
      public let average: Swift.Double
      public let max: Swift.Double
      public let metricMax: Swift.Double?
      public let min: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct FrozenFrame : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Frustration : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct InForegroundPeriods : Swift.Codable {
      public let duration: Swift.Int64
      public let start: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct JsRefreshRate : Swift.Codable {
      public let average: Swift.Double
      public let max: Swift.Double
      public let metricMax: Swift.Double?
      public let min: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum LoadingType : Swift.String, Swift.Codable {
      case initialLoad
      case routeChange
      case activityDisplay
      case activityRedisplay
      case fragmentDisplay
      case fragmentRedisplay
      case viewControllerDisplay
      case viewControllerRedisplay
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public struct LongTask : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Resource : Swift.Codable {
      public let count: Swift.Int64
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogRUM.RUMViewEvent.FeatureFlags {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TelemetryErrorEvent {
  public let dd: DatadogRUM.TelemetryErrorEvent.DD
  public let action: DatadogRUM.TelemetryErrorEvent.Action?
  public let application: DatadogRUM.TelemetryErrorEvent.Application?
  public let date: Swift.Int64
  public let experimentalFeatures: [Swift.String]?
  public let service: Swift.String
  public let session: DatadogRUM.TelemetryErrorEvent.Session?
  public let source: DatadogRUM.TelemetryErrorEvent.Source
  public let telemetry: DatadogRUM.TelemetryErrorEvent.Telemetry
  public let type: Swift.String
  public let version: Swift.String
  public let view: DatadogRUM.TelemetryErrorEvent.View?
  public struct DD : Swift.Codable {
    public let formatVersion: Swift.Int64
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Telemetry : Swift.Codable {
    public let error: DatadogRUM.TelemetryErrorEvent.Telemetry.Error?
    public let message: Swift.String
    public let status: Swift.String
    public let type: Swift.String?
    public struct Error : Swift.Codable {
      public let kind: Swift.String?
      public let stack: Swift.String?
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TelemetryDebugEvent {
  public let dd: DatadogRUM.TelemetryDebugEvent.DD
  public let action: DatadogRUM.TelemetryDebugEvent.Action?
  public let application: DatadogRUM.TelemetryDebugEvent.Application?
  public let date: Swift.Int64
  public let experimentalFeatures: [Swift.String]?
  public let service: Swift.String
  public let session: DatadogRUM.TelemetryDebugEvent.Session?
  public let source: DatadogRUM.TelemetryDebugEvent.Source
  public var telemetry: DatadogRUM.TelemetryDebugEvent.Telemetry {
    get
  }
  public let type: Swift.String
  public let version: Swift.String
  public let view: DatadogRUM.TelemetryDebugEvent.View?
  public struct DD : Swift.Codable {
    public let formatVersion: Swift.Int64
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Telemetry : Swift.Codable {
    public let message: Swift.String
    public let status: Swift.String
    public let type: Swift.String?
    public var telemetryInfo: [Swift.String : any Swift.Encodable] {
      get
    }
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DatadogRUM.TelemetryDebugEvent.Telemetry {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct TelemetryConfigurationEvent {
  public let dd: DatadogRUM.TelemetryConfigurationEvent.DD
  public let action: DatadogRUM.TelemetryConfigurationEvent.Action?
  public let application: DatadogRUM.TelemetryConfigurationEvent.Application?
  public let date: Swift.Int64
  public let experimentalFeatures: [Swift.String]?
  public let service: Swift.String
  public let session: DatadogRUM.TelemetryConfigurationEvent.Session?
  public let source: DatadogRUM.TelemetryConfigurationEvent.Source
  public var telemetry: DatadogRUM.TelemetryConfigurationEvent.Telemetry
  public let type: Swift.String
  public let version: Swift.String
  public let view: DatadogRUM.TelemetryConfigurationEvent.View?
  public struct DD : Swift.Codable {
    public let formatVersion: Swift.Int64
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Action : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Application : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Session : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum Source : Swift.String, Swift.Codable {
    case android
    case ios
    case browser
    case flutter
    case reactNative
    case unity
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct Telemetry : Swift.Codable {
    public var configuration: DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration
    public let type: Swift.String
    public struct Configuration : Swift.Codable {
      public let actionNameAttribute: Swift.String?
      public let allowFallbackToLocalStorage: Swift.Bool?
      public let allowUntrustedEvents: Swift.Bool?
      public let backgroundTasksEnabled: Swift.Bool?
      public let batchProcessingLevel: Swift.Int64?
      public let batchSize: Swift.Int64?
      public let batchUploadFrequency: Swift.Int64?
      public var dartVersion: Swift.String?
      public var defaultPrivacyLevel: Swift.String?
      public let forwardConsoleLogs: DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ForwardConsoleLogs?
      public let forwardErrorsToLogs: Swift.Bool?
      public let forwardReports: DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ForwardReports?
      public var initializationType: Swift.String?
      public var mobileVitalsUpdatePeriod: Swift.Int64?
      public let premiumSampleRate: Swift.Int64?
      public var reactNativeVersion: Swift.String?
      public var reactVersion: Swift.String?
      public let replaySampleRate: Swift.Int64?
      public let selectedTracingPropagators: [DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.SelectedTracingPropagators]?
      public var sessionReplaySampleRate: Swift.Int64?
      public let sessionSampleRate: Swift.Int64?
      public let silentMultipleInit: Swift.Bool?
      public var startSessionReplayRecordingManually: Swift.Bool?
      public let storeContextsAcrossPages: Swift.Bool?
      public let telemetryConfigurationSampleRate: Swift.Int64?
      public let telemetrySampleRate: Swift.Int64?
      public let traceSampleRate: Swift.Int64?
      public var trackBackgroundEvents: Swift.Bool?
      public var trackCrossPlatformLongTasks: Swift.Bool?
      public var trackErrors: Swift.Bool?
      public var trackFlutterPerformance: Swift.Bool?
      public var trackFrustrations: Swift.Bool?
      public var trackInteractions: Swift.Bool?
      public var trackLongTask: Swift.Bool?
      public var trackNativeErrors: Swift.Bool?
      public var trackNativeLongTasks: Swift.Bool?
      public var trackNativeViews: Swift.Bool?
      public var trackNetworkRequests: Swift.Bool?
      public var trackResources: Swift.Bool?
      public let trackSessionAcrossSubdomains: Swift.Bool?
      public var trackUserInteractions: Swift.Bool?
      public var trackViewsManually: Swift.Bool?
      public let useAllowedTracingOrigins: Swift.Bool?
      public let useAllowedTracingUrls: Swift.Bool?
      public let useBeforeSend: Swift.Bool?
      public let useCrossSiteSessionCookie: Swift.Bool?
      public let useExcludedActivityUrls: Swift.Bool?
      public var useFirstPartyHosts: Swift.Bool?
      public let useLocalEncryption: Swift.Bool?
      public let usePartitionedCrossSiteSessionCookie: Swift.Bool?
      public var useProxy: Swift.Bool?
      public let useSecureSessionCookie: Swift.Bool?
      public let useTracing: Swift.Bool?
      public let useWorkerUrl: Swift.Bool?
      public let viewTrackingStrategy: DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ViewTrackingStrategy?
      public enum ForwardConsoleLogs : Swift.Codable {
        case stringsArray(value: [Swift.String])
        case string(value: Swift.String)
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public enum ForwardReports : Swift.Codable {
        case stringsArray(value: [Swift.String])
        case string(value: Swift.String)
        public func encode(to encoder: any Swift.Encoder) throws
        public init(from decoder: any Swift.Decoder) throws
      }
      public enum SelectedTracingPropagators : Swift.String, Swift.Codable {
        case datadog
        case b3
        case b3multi
        case tracecontext
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public enum ViewTrackingStrategy : Swift.String, Swift.Codable {
        case activityViewTrackingStrategy
        case fragmentViewTrackingStrategy
        case mixedViewTrackingStrategy
        case navigationViewTrackingStrategy
        public init?(rawValue: Swift.String)
        public typealias RawValue = Swift.String
        public var rawValue: Swift.String {
          get
        }
      }
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct View : Swift.Codable {
    public let id: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RUMSessionPrecondition : Swift.String, Swift.Codable {
  case userAppLaunch
  case inactivityTimeout
  case maxDuration
  case backgroundLaunch
  case prewarm
  case fromNonInteractiveSession
  case explicitStop
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RUMCITest : Swift.Codable {
  public let testExecutionId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMConnectivity : Swift.Codable {
  public let cellular: DatadogRUM.RUMConnectivity.Cellular?
  public let effectiveType: DatadogRUM.RUMConnectivity.EffectiveType?
  public let interfaces: [DatadogRUM.RUMConnectivity.Interfaces]?
  public let status: DatadogRUM.RUMConnectivity.Status
  public struct Cellular : Swift.Codable {
    public let carrierName: Swift.String?
    public let technology: Swift.String?
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum EffectiveType : Swift.String, Swift.Codable {
    case slow2g
    case effectiveType2g
    case effectiveType3g
    case effectiveType4g
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Interfaces : Swift.String, Swift.Codable {
    case bluetooth
    case cellular
    case ethernet
    case wifi
    case wimax
    case mixed
    case other
    case unknown
    case interfacesNone
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Status : Swift.String, Swift.Codable {
    case connected
    case notConnected
    case maybe
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMEventAttributes : Swift.Codable {
  public var contextInfo: [Swift.String : any Swift.Encodable] {
    get
  }
}
extension DatadogRUM.RUMEventAttributes {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMDevice : Swift.Codable {
  public let architecture: Swift.String?
  public let brand: Swift.String?
  public let model: Swift.String?
  public let name: Swift.String?
  public let type: DatadogRUM.RUMDevice.RUMDeviceType
  public enum RUMDeviceType : Swift.String, Swift.Codable {
    case mobile
    case desktop
    case tablet
    case tv
    case gamingConsole
    case bot
    case other
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMOperatingSystem : Swift.Codable {
  public let build: Swift.String?
  public let name: Swift.String
  public let version: Swift.String
  public let versionMajor: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RUMSessionType : Swift.String, Swift.Codable {
  case user
  case synthetics
  case ciTest
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct RUMSyntheticsTest : Swift.Codable {
  public let injected: Swift.Bool?
  public let resultId: Swift.String
  public let testId: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RUMUser : Swift.Codable {
  public let email: Swift.String?
  public let id: Swift.String?
  public let name: Swift.String?
  public var usrInfo: [Swift.String : any Swift.Encodable] {
    get
  }
}
extension DatadogRUM.RUMUser {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RUMActionID : Swift.Codable {
  case string(value: Swift.String)
  case stringsArray(value: [Swift.String])
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum RUMMethod : Swift.String, Swift.Codable {
  case post
  case get
  case head
  case put
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension DatadogRUM.RUMMonitorProtocol {
  public func startView(viewController: UIKit.UIViewController, name: Swift.String? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopView(viewController: UIKit.UIViewController, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func startView(key: Swift.String, name: Swift.String? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopView(key: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func addError(message: Swift.String, type: Swift.String? = nil, stack: Swift.String? = nil, source: DatadogRUM.RUMErrorSource = .custom, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:], file: Swift.StaticString? = #filePath, line: Swift.UInt? = #line)
  public func addError(error: any Swift.Error, source: DatadogRUM.RUMErrorSource = .custom, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func startResource(resourceKey: Swift.String, request: Foundation.URLRequest, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func startResource(resourceKey: Swift.String, url: Foundation.URL, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func startResource(resourceKey: Swift.String, httpMethod: DatadogRUM.RUMMethod, urlString: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func addResourceMetrics(resourceKey: Swift.String, metrics: Foundation.URLSessionTaskMetrics, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopResource(resourceKey: Swift.String, response: Foundation.URLResponse, size: Swift.Int64? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopResource(resourceKey: Swift.String, statusCode: Swift.Int? = nil, kind: DatadogRUM.RUMResourceType, size: Swift.Int64? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopResourceWithError(resourceKey: Swift.String, error: any Swift.Error, response: Foundation.URLResponse? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopResourceWithError(resourceKey: Swift.String, message: Swift.String, type: Swift.String? = nil, response: Foundation.URLResponse? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func addAction(type: DatadogRUM.RUMActionType, name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func startAction(type: DatadogRUM.RUMActionType, name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func stopAction(type: DatadogRUM.RUMActionType, name: Swift.String? = nil, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
}
@_hasMissingDesignatedInitializers public class RUMMonitor {
  public static func shared(in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) -> any DatadogRUM.RUMMonitorProtocol
  @objc deinit
}
extension DatadogRUM.RUM : DatadogInternal.InternalExtended {
  public typealias ExtendedType = DatadogRUM.RUM
}
extension DatadogInternal.InternalExtension where ExtendedType == DatadogRUM.RUM {
  public static func isEnabled(in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) -> Swift.Bool
  public static func enableURLSessionTracking(with configuration: DatadogRUM.RUM.Configuration.URLSessionTracking, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) throws
}
public enum RUM {
  public static func enable(with configuration: DatadogRUM.RUM.Configuration, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default)
}
@available(iOS 13, *)
extension SwiftUI.View {
  public func trackRUMTapAction(name: Swift.String, attributes: [Swift.String : any Swift.Encodable] = [:], count: Swift.Int = 1, in core: any DatadogInternal.DatadogCoreProtocol = CoreRegistry.default) -> some SwiftUI.View
  
}
public typealias RUMResourceType = DatadogRUM.RUMResourceEvent.Resource.ResourceType
public enum RUMActionType {
  case tap
  case click
  case scroll
  case swipe
  case custom
  public static func == (a: DatadogRUM.RUMActionType, b: DatadogRUM.RUMActionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RUMErrorSource {
  case source
  case network
  case webview
  case console
  case custom
  public static func == (a: DatadogRUM.RUMErrorSource, b: DatadogRUM.RUMErrorSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RUMMonitorProtocol : AnyObject {
  func addAttribute(forKey key: DatadogInternal.AttributeKey, value: any Swift.Encodable)
  func removeAttribute(forKey key: DatadogInternal.AttributeKey)
  func currentSessionID(completion: @escaping (Swift.String?) -> Swift.Void)
  func stopSession()
  func startView(viewController: UIKit.UIViewController, name: Swift.String?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopView(viewController: UIKit.UIViewController, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func startView(key: Swift.String, name: Swift.String?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopView(key: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func addTiming(name: Swift.String)
  func addError(message: Swift.String, type: Swift.String?, stack: Swift.String?, source: DatadogRUM.RUMErrorSource, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable], file: Swift.StaticString?, line: Swift.UInt?)
  func addError(error: any Swift.Error, source: DatadogRUM.RUMErrorSource, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func startResource(resourceKey: Swift.String, request: Foundation.URLRequest, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func startResource(resourceKey: Swift.String, url: Foundation.URL, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func startResource(resourceKey: Swift.String, httpMethod: DatadogRUM.RUMMethod, urlString: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func addResourceMetrics(resourceKey: Swift.String, metrics: Foundation.URLSessionTaskMetrics, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopResource(resourceKey: Swift.String, response: Foundation.URLResponse, size: Swift.Int64?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopResource(resourceKey: Swift.String, statusCode: Swift.Int?, kind: DatadogRUM.RUMResourceType, size: Swift.Int64?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopResourceWithError(resourceKey: Swift.String, error: any Swift.Error, response: Foundation.URLResponse?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopResourceWithError(resourceKey: Swift.String, message: Swift.String, type: Swift.String?, response: Foundation.URLResponse?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func addAction(type: DatadogRUM.RUMActionType, name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func startAction(type: DatadogRUM.RUMActionType, name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func stopAction(type: DatadogRUM.RUMActionType, name: Swift.String?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable])
  func addFeatureFlagEvaluation(name: Swift.String, value: any Swift.Encodable)
  var debug: Swift.Bool { get set }
}
public struct RUMView {
  public var name: Swift.String
  public var path: Swift.String?
  public var attributes: [DatadogInternal.AttributeKey : any Swift.Encodable]
  public var isUntrackedModal: Swift.Bool
  @available(*, deprecated, message: "This initializer is renamed to `init(name:attributes:)`.")
  public init(path: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public init(name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:], isUntrackedModal: Swift.Bool = false)
}
public protocol UIKitRUMViewsPredicate {
  func rumView(for viewController: UIKit.UIViewController) -> DatadogRUM.RUMView?
}
public struct DefaultUIKitRUMViewsPredicate : DatadogRUM.UIKitRUMViewsPredicate {
  public init()
  public func rumView(for viewController: UIKit.UIViewController) -> DatadogRUM.RUMView?
}
extension DatadogRUM.RUMMonitorProtocol {
  public var _internal: DatadogRUM.DatadogInternalInterface? {
    get
  }
}
public struct DatadogInternalInterface {
  public func addLongTask(at time: Foundation.Date, duration: Foundation.TimeInterval, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func updatePerformanceMetric(at time: Foundation.Date, metric: DatadogRUM.PerformanceMetric, value: Swift.Double, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
  public func addResourceMetrics(at time: Foundation.Date, resourceKey: Swift.String, fetch: (start: Foundation.Date, end: Foundation.Date), redirection: (start: Foundation.Date, end: Foundation.Date)?, dns: (start: Foundation.Date, end: Foundation.Date)?, connect: (start: Foundation.Date, end: Foundation.Date)?, ssl: (start: Foundation.Date, end: Foundation.Date)?, firstByte: (start: Foundation.Date, end: Foundation.Date)?, download: (start: Foundation.Date, end: Foundation.Date)?, responseSize: Swift.Int64?, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
}
public struct RUMAction {
  public var name: Swift.String
  public var attributes: [DatadogInternal.AttributeKey : any Swift.Encodable]
  public init(name: Swift.String, attributes: [DatadogInternal.AttributeKey : any Swift.Encodable] = [:])
}
public typealias UIKitRUMActionsPredicate = DatadogRUM.UITouchRUMActionsPredicate
public protocol UITouchRUMActionsPredicate {
  func rumAction(targetView: UIKit.UIView) -> DatadogRUM.RUMAction?
}
public protocol UIPressRUMActionsPredicate {
  func rumAction(press type: UIKit.UIPress.PressType, targetView: UIKit.UIView) -> DatadogRUM.RUMAction?
}
public struct DefaultUIKitRUMActionsPredicate {
  public init()
}
extension DatadogRUM.DefaultUIKitRUMActionsPredicate : DatadogRUM.UITouchRUMActionsPredicate {
  public func rumAction(targetView: UIKit.UIView) -> DatadogRUM.RUMAction?
}
extension DatadogRUM.DefaultUIKitRUMActionsPredicate : DatadogRUM.UIPressRUMActionsPredicate {
  public func rumAction(press type: UIKit.UIPress.PressType, targetView: UIKit.UIView) -> DatadogRUM.RUMAction?
}
extension DatadogRUM.RUMViewEvent : Swift.Encodable {}
extension DatadogRUM.RUMViewEvent : Swift.Decodable {}
extension DatadogRUM.RUMActionEvent : Swift.Encodable {}
extension DatadogRUM.RUMActionEvent : Swift.Decodable {}
extension DatadogRUM.RUMResourceEvent : Swift.Encodable {}
extension DatadogRUM.RUMResourceEvent : Swift.Decodable {}
extension DatadogRUM.RUMErrorEvent : Swift.Encodable {}
extension DatadogRUM.RUMErrorEvent : Swift.Decodable {}
extension DatadogRUM.RUMLongTaskEvent : Swift.Encodable {}
extension DatadogRUM.RUMLongTaskEvent : Swift.Decodable {}
extension DatadogRUM.PerformanceMetric : Swift.Equatable {}
extension DatadogRUM.PerformanceMetric : Swift.Hashable {}
extension DatadogRUM.RUM.Configuration.VitalsFrequency : Swift.Equatable {}
extension DatadogRUM.RUM.Configuration.VitalsFrequency : Swift.Hashable {}
extension DatadogRUM.RUM.Configuration.VitalsFrequency : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionEvent.DD.Session.Plan : Swift.Equatable {}
extension DatadogRUM.RUMActionEvent.DD.Session.Plan : Swift.Hashable {}
extension DatadogRUM.RUMActionEvent.DD.Session.Plan : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionEvent.Action.Frustration.FrustrationType : Swift.Equatable {}
extension DatadogRUM.RUMActionEvent.Action.Frustration.FrustrationType : Swift.Hashable {}
extension DatadogRUM.RUMActionEvent.Action.Frustration.FrustrationType : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionEvent.Action.ActionType : Swift.Equatable {}
extension DatadogRUM.RUMActionEvent.Action.ActionType : Swift.Hashable {}
extension DatadogRUM.RUMActionEvent.Action.ActionType : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionEvent.Container.Source : Swift.Equatable {}
extension DatadogRUM.RUMActionEvent.Container.Source : Swift.Hashable {}
extension DatadogRUM.RUMActionEvent.Container.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionEvent.Source : Swift.Equatable {}
extension DatadogRUM.RUMActionEvent.Source : Swift.Hashable {}
extension DatadogRUM.RUMActionEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.DD.Session.Plan : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.DD.Session.Plan : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.DD.Session.Plan : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Container.Source : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Container.Source : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Container.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Error.Causes.Source : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Error.Causes.Source : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Error.Causes.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Error.Handling : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Error.Handling : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Error.Handling : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Error.Resource.Provider.ProviderType : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Error.Resource.Provider.ProviderType : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Error.Resource.Provider.ProviderType : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Error.Source : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Error.Source : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Error.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Error.SourceType : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Error.SourceType : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Error.SourceType : Swift.RawRepresentable {}
extension DatadogRUM.RUMErrorEvent.Source : Swift.Equatable {}
extension DatadogRUM.RUMErrorEvent.Source : Swift.Hashable {}
extension DatadogRUM.RUMErrorEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMLongTaskEvent.DD.Session.Plan : Swift.Equatable {}
extension DatadogRUM.RUMLongTaskEvent.DD.Session.Plan : Swift.Hashable {}
extension DatadogRUM.RUMLongTaskEvent.DD.Session.Plan : Swift.RawRepresentable {}
extension DatadogRUM.RUMLongTaskEvent.Container.Source : Swift.Equatable {}
extension DatadogRUM.RUMLongTaskEvent.Container.Source : Swift.Hashable {}
extension DatadogRUM.RUMLongTaskEvent.Container.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMLongTaskEvent.Source : Swift.Equatable {}
extension DatadogRUM.RUMLongTaskEvent.Source : Swift.Hashable {}
extension DatadogRUM.RUMLongTaskEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.DD.Session.Plan : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.DD.Session.Plan : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.DD.Session.Plan : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.Container.Source : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.Container.Source : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.Container.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.Resource.Graphql.OperationType : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.Resource.Graphql.OperationType : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.Resource.Graphql.OperationType : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.Resource.Provider.ProviderType : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.Resource.Provider.ProviderType : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.Resource.Provider.ProviderType : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.Resource.ResourceType : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.Resource.ResourceType : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.Resource.ResourceType : Swift.RawRepresentable {}
extension DatadogRUM.RUMResourceEvent.Source : Swift.Equatable {}
extension DatadogRUM.RUMResourceEvent.Source : Swift.Hashable {}
extension DatadogRUM.RUMResourceEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.DD.PageStates.State : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.DD.PageStates.State : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.DD.PageStates.State : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.DD.Session.Plan : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.DD.Session.Plan : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.DD.Session.Plan : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.Container.Source : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.Container.Source : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.Container.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.Privacy.ReplayLevel : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.Privacy.ReplayLevel : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.Privacy.ReplayLevel : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.Source : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.Source : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.RUMViewEvent.View.LoadingType : Swift.Equatable {}
extension DatadogRUM.RUMViewEvent.View.LoadingType : Swift.Hashable {}
extension DatadogRUM.RUMViewEvent.View.LoadingType : Swift.RawRepresentable {}
extension DatadogRUM.TelemetryErrorEvent : Swift.Encodable {}
extension DatadogRUM.TelemetryErrorEvent : Swift.Decodable {}
extension DatadogRUM.TelemetryErrorEvent.Source : Swift.Equatable {}
extension DatadogRUM.TelemetryErrorEvent.Source : Swift.Hashable {}
extension DatadogRUM.TelemetryErrorEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.TelemetryDebugEvent : Swift.Encodable {}
extension DatadogRUM.TelemetryDebugEvent : Swift.Decodable {}
extension DatadogRUM.TelemetryDebugEvent.Source : Swift.Equatable {}
extension DatadogRUM.TelemetryDebugEvent.Source : Swift.Hashable {}
extension DatadogRUM.TelemetryDebugEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.TelemetryConfigurationEvent : Swift.Encodable {}
extension DatadogRUM.TelemetryConfigurationEvent : Swift.Decodable {}
extension DatadogRUM.TelemetryConfigurationEvent.Source : Swift.Equatable {}
extension DatadogRUM.TelemetryConfigurationEvent.Source : Swift.Hashable {}
extension DatadogRUM.TelemetryConfigurationEvent.Source : Swift.RawRepresentable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.SelectedTracingPropagators : Swift.Equatable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.SelectedTracingPropagators : Swift.Hashable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.SelectedTracingPropagators : Swift.RawRepresentable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ViewTrackingStrategy : Swift.Equatable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ViewTrackingStrategy : Swift.Hashable {}
extension DatadogRUM.TelemetryConfigurationEvent.Telemetry.Configuration.ViewTrackingStrategy : Swift.RawRepresentable {}
extension DatadogRUM.RUMSessionPrecondition : Swift.Equatable {}
extension DatadogRUM.RUMSessionPrecondition : Swift.Hashable {}
extension DatadogRUM.RUMSessionPrecondition : Swift.RawRepresentable {}
extension DatadogRUM.RUMConnectivity.EffectiveType : Swift.Equatable {}
extension DatadogRUM.RUMConnectivity.EffectiveType : Swift.Hashable {}
extension DatadogRUM.RUMConnectivity.EffectiveType : Swift.RawRepresentable {}
extension DatadogRUM.RUMConnectivity.Interfaces : Swift.Equatable {}
extension DatadogRUM.RUMConnectivity.Interfaces : Swift.Hashable {}
extension DatadogRUM.RUMConnectivity.Interfaces : Swift.RawRepresentable {}
extension DatadogRUM.RUMConnectivity.Status : Swift.Equatable {}
extension DatadogRUM.RUMConnectivity.Status : Swift.Hashable {}
extension DatadogRUM.RUMConnectivity.Status : Swift.RawRepresentable {}
extension DatadogRUM.RUMDevice.RUMDeviceType : Swift.Equatable {}
extension DatadogRUM.RUMDevice.RUMDeviceType : Swift.Hashable {}
extension DatadogRUM.RUMDevice.RUMDeviceType : Swift.RawRepresentable {}
extension DatadogRUM.RUMSessionType : Swift.Equatable {}
extension DatadogRUM.RUMSessionType : Swift.Hashable {}
extension DatadogRUM.RUMSessionType : Swift.RawRepresentable {}
extension DatadogRUM.RUMMethod : Swift.Equatable {}
extension DatadogRUM.RUMMethod : Swift.Hashable {}
extension DatadogRUM.RUMMethod : Swift.RawRepresentable {}
extension DatadogRUM.RUMActionType : Swift.Equatable {}
extension DatadogRUM.RUMActionType : Swift.Hashable {}
extension DatadogRUM.RUMErrorSource : Swift.Equatable {}
extension DatadogRUM.RUMErrorSource : Swift.Hashable {}
